apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  generateName: operator-e2e-
spec:
  workspaces:
    - name: work
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
  pipelineSpec:
    params:
      - name: SNAPSHOT
      - name: OCP_VERSION
        default: "4.19"
      - name: TAS_DEPLOY_NAMESPACE
        default: tas-e2e
    workspaces:
      - name: work
    tasks:
      - name: parse-metadata
        taskRef:
          resolver: git
          params:
            - name: url
              value: https://github.com/securesign/pipelines.git
            - name: revision
              value: main
            - name: pathInRepo
              value: tasks/integration-test/parse-metadata.yaml
        params:
          - name: SNAPSHOT
            value: $(params.SNAPSHOT)
      - name: clone-operator-source-code
        runAfter:
          - parse-metadata
        taskRef:
          params:
            - name: name
              value: git-clone
            - name: bundle
              value: quay.io/konflux-ci/tekton-catalog/task-git-clone:0.1
            - name: kind
              value: task
          resolver: bundles
        params:
          - name: url
            value: $(tasks.parse-metadata.results.operator-url)
          - name: revision
            value: $(tasks.parse-metadata.results.operator-revision)
          - name: subdirectory
            value: "operator"
        workspaces:
          - name: output
            workspace: work
      - name: clone-e2e-test-source-code
        taskRef:
          params:
            - name: name
              value: git-clone
            - name: bundle
              value: quay.io/konflux-ci/tekton-catalog/task-git-clone:0.1
            - name: kind
              value: task
          resolver: bundles
        params:
          - name: url
            value: https://github.com/securesign/sigstore-e2e
          - name: revision
            value: main
          - name: subdirectory
            value: "sigstore-e2e"
        workspaces:
          - name: output
            workspace: work
      - name: provision-eaas-space
        taskRef:
          resolver: bundles
          params:
            - name: name
              value: eaas-provision-space
            - name: bundle
              value: quay.io/konflux-ci/tekton-catalog/task-eaas-provision-space:0.1-4e4fa7355a6a51083954408e7e3b647e3bddb8d8
            - name: kind
              value: task
        params:
          - name: ownerName
            value: $(context.pipelineRun.name)
          - name: ownerUid
            value: $(context.pipelineRun.uid)
      - name: provision-cluster
        runAfter:
          - provision-eaas-space
        taskSpec:
          results:
            - name: clusterName
              value: "$(steps.create-cluster.results.clusterName)"
          steps:
            - name: pick-version
              ref:
                resolver: git
                params:
                  - name: url
                    value: https://github.com/konflux-ci/build-definitions.git
                  - name: revision
                    value: main
                  - name: pathInRepo
                    value: stepactions/eaas-get-latest-openshift-version-by-prefix/0.1/eaas-get-latest-openshift-version-by-prefix.yaml
              params:
                - name: prefix
                  value: "$(params.OCP_VERSION)"
            - name: create-cluster
              ref:
                resolver: git
                params:
                  - name: url
                    value: https://github.com/konflux-ci/build-definitions.git
                  - name: revision
                    value: main
                  - name: pathInRepo
                    value: stepactions/eaas-create-ephemeral-cluster-hypershift-aws/0.1/eaas-create-ephemeral-cluster-hypershift-aws.yaml
              params:
                - name: eaasSpaceSecretRef
                  value: $(tasks.provision-eaas-space.results.secretRef)
                - name: version
                  value: "$(steps.pick-version.results.version)"
                - name: instanceType
                  value: m5.large
                - name: timeout
                  value: 60m
                - name: imageContentSources
                  value: |
                    - source: registry.redhat.io/rhtas/rhtas-operator-bundle
                      mirrors:
                        - quay.io/securesign/rhtas-operator-bundle
                        - quay.io/securesign/rhtas-operator-bundle-v1-0
                        - quay.io/securesign/rhtas-operator-bundle-v1-1
                        - quay.io/securesign/rhtas-operator-bundle-v1-2
                    - source: registry.redhat.io/rhtas/rhtas-rhel9-operator
                      mirrors:
                        - quay.io/securesign/rhtas-operator
                        - quay.io/securesign/rhtas-operator-v1-0
                        - quay.io/securesign/rhtas-operator-v1-1
                        - quay.io/securesign/rhtas-operator-v1-2
                    - source: registry.redhat.io/rhtas/trillian-logsigner-rhel9
                      mirrors:
                      - quay.io/securesign/trillian-logsigner
                    - source: registry.redhat.io/rhtas/trillian-logserver-rhel9
                      mirrors:
                      - quay.io/securesign/trillian-logserver
                    - source: registry.redhat.io/rhtas/trillian-database-rhel9
                      mirrors:
                      - quay.io/securesign/trillian-database
                    - source: registry.redhat.io/rhtas/fulcio-rhel9
                      mirrors:
                      - quay.io/securesign/fulcio-server
                    - source: registry.redhat.io/rhtas/trillian-redis-rhel9
                      mirrors:
                      - quay.io/securesign/trillian-redis
                    - source: registry.redhat.io/rhtas/rekor-server-rhel9
                      mirrors:
                      - quay.io/securesign/rekor-server
                    - source: registry.redhat.io/rhtas/rekor-search-ui-rhel9
                      mirrors:
                      - quay.io/securesign/rekor-search-ui
                    - source: registry.redhat.io/rhtas/rekor-backfill-redis-rhel9
                      mirrors:
                      - quay.io/securesign/rekor-backfill-redis
                    - source: registry.redhat.io/rhtas/rekor-monitor-rhel9
                      mirrors:
                      - quay.io/securesign/rekor-monitor
                    - source: registry.redhat.io/rhtas/tuf-server-rhel9
                      mirrors:
                      - quay.io/securesign/scaffold-tuf-server
                    - source: registry.redhat.io/rhtas/certificate-transparency-rhel9
                      mirrors:
                      - quay.io/securesign/certificate-transparency-go
                    - source: registry.redhat.io/rhtas/client-server-cg-rhel9
                      mirrors:
                      - quay.io/securesign/cli-client-server-cg
                    - source: registry.redhat.io/rhtas/client-server-re-rhel9
                      mirrors:
                      - quay.io/securesign/client-server-re
                    - source: registry.redhat.io/rhtas/segment-reporting-rhel9
                      mirrors:
                      - quay.io/securesign/segment-backup-job
                    - source: registry.redhat.io/rhtas/timestamp-authority-rhel9
                      mirrors:
                      - quay.io/securesign/timestamp-authority
                    - source: registry.redhat.io/rhtas/createtree-rhel9
                      mirrors:
                      - quay.io/securesign/trillian-createtree
                    - source: registry.redhat.io/rhtas/client-server-rhel9
                      mirrors:
                      - quay.io/securesign/client-server
                    - source: registry.redhat.io/rhtas/tuffer-rhel9
                      mirrors:
                      - quay.io/securesign/tuffer
      - name: install-operator-from-bundle
        runAfter:
          - provision-cluster
          - parse-metadata
        taskRef:
          resolver: git
          params:
            - name: url
              value: https://github.com/securesign/pipelines.git
            - name: revision
              value: main
            - name: pathInRepo
              value: tasks/integration-test/install-operator-from-bundle.yaml
        params:
          - name: eaasSpaceSecretRef
            value: $(tasks.provision-eaas-space.results.secretRef)
          - name: clusterName
            value: "$(tasks.provision-cluster.results.clusterName)"
          - name: bundleImage
            value: "$(tasks.parse-metadata.results.image)"
        # use CEL regexp once it moves from alpha (see https://tekton.dev/docs/pipelines/pipelines/#use-cel-expression-in-whenexpression)
        when:
          - input: "$(tasks.parse-metadata.results.component)"
            operator: in
            values: [ "rhtas-operator-bundle", "rhtas-operator-bundle-v1-1", "rhtas-operator-bundle-v1-2" ]
      - name: install-operator-from-image
        runAfter:
          - provision-cluster
          - parse-metadata
        taskRef:
          resolver: git
          params:
            - name: url
              value: https://github.com/securesign/pipelines.git
            - name: revision
              value: main
            - name: pathInRepo
              value: tasks/integration-test/install-operator-from-image.yaml
        params:
          - name: eaasSpaceSecretRef
            value: $(tasks.provision-eaas-space.results.secretRef)
          - name: clusterName
            value: "$(tasks.provision-cluster.results.clusterName)"
          - name: operatorImage
            value: "$(tasks.parse-metadata.results.image)"
          - name: resourcesPath
            value: "$(workspaces.source-code.path)/operator/config/env/openshift"
        workspaces:
            - name: source-code
              workspace: work
        # use CEL regexp once it moves from alpha (see https://tekton.dev/docs/pipelines/pipelines/#use-cel-expression-in-whenexpression)
        when:
          - input: "$(tasks.parse-metadata.results.component)"
            operator: in
            values: [ "rhtas-operator", "rhtas-operator-v1-1", "rhtas-operator-v1-2" ]
      - name: install-operator-from-fbc
        timeout: "0h5m0s"
        runAfter:
          - provision-cluster
          - parse-metadata
        taskRef:
          resolver: git
          params:
            - name: url
              value: https://github.com/securesign/pipelines.git
            - name: revision
              value: main
            - name: pathInRepo
              value: tasks/integration-test/install-operator-from-fbc.yaml
        params:
          - name: eaasSpaceSecretRef
            value: $(tasks.provision-eaas-space.results.secretRef)
          - name: clusterName
            value: "$(tasks.provision-cluster.results.clusterName)"
          - name: fbcImage
            value: "$(tasks.parse-metadata.results.image)"
        # replace with cel regexp once enabled https://issues.redhat.com/browse/KFLUXSPRT-1833
        when:
          - input: "$(tasks.parse-metadata.results.component)"
            operator: in
            values: [
              "fbc-v4-19", "fbc-v4-18", "fbc-v4-17", "fbc-v4-16", "fbc-v4-15",
              "fbc-v4-19-v1-2", "fbc-v4-18-v1-2", "fbc-v4-17-v1-2", "fbc-v4-16-v1-2", "fbc-v4-15-v1-2",
              "fbc-v4-18-v1-1", "fbc-v4-17-v1-1", "fbc-v4-16-v1-1", "fbc-v4-15-v1-1"]
      - name: prepare-tests
        runAfter:
          # run after either one
          - install-operator-from-image
          - install-operator-from-bundle
          - install-operator-from-fbc
        workspaces:
          - name: source-code
            workspace: work
        taskSpec:
          results:
            - name: oidc-hostname
              type: string
              value: "$(steps.install-keycloak.results.oidc-hostname)"
            - name: fulcio-url
              type: string
              value: "$(steps.install-tas.results.fulcio-url)"
            - name: tsa-url
              type: string
              value: "$(steps.install-tas.results.tsa-url)"
            - name: tuf-url
              type: string
              value: "$(steps.install-tas.results.tuf-url)"
            - name: rekor-url
              type: string
              value: "$(steps.install-tas.results.rekor-url)"
          volumes:
            - name: credentials
              emptyDir: { }
          workspaces:
            - name: source-code
          steps:
            - name: get-kubeconfig
              ref:
                resolver: git
                params:
                  - name: url
                    value: https://github.com/konflux-ci/build-definitions.git
                  - name: revision
                    value: main
                  - name: pathInRepo
                    value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
              params:
                - name: eaasSpaceSecretRef
                  value: $(tasks.provision-eaas-space.results.secretRef)
                - name: clusterName
                  value: "$(tasks.provision-cluster.results.clusterName)"
                - name: credentials
                  value: credentials
            - name: install-keycloak
              ref:
                resolver: git
                params:
                  - name: url
                    value: https://github.com/securesign/pipelines.git
                  - name: revision
                    value: main
                  - name: pathInRepo
                    value: stepactions/integration-test/install-keycloak.yaml
              params:
                - name: credentials
                  value: credentials
                - name: KUBECONFIG
                  value: "$(steps.get-kubeconfig.results.kubeconfig)"
                - name: workdir
                  value: "$(workspaces.source-code.path)/operator"
      - name: download-binaries
        workspaces:
          - name: work
            workspace: work
        taskSpec:
          workspaces:
            - name: work
          steps:
            - name: get-tuftool
              image: registry.redhat.io/rhtas/tuftool-rhel9:1.3.0
              script: |
                mkdir -p $(workspaces.work.path)/binaries
                cp /usr/bin/tuftool $(workspaces.work.path)/binaries/
            - name: get-cosign
              image: registry.redhat.io/rhtas/cosign-rhel9:1.3.0
              script: |
                mkdir -p $(workspaces.work.path)/binaries
                cp /usr/local/bin/cosign $(workspaces.work.path)/binaries/
      - name: run-operator-e2e
        runAfter:
          - prepare-tests
          - download-binaries
        workspaces:
          - name: source-code
            workspace: work
        taskSpec:
          results:
            - name: TEST_OUTPUT
              description: "Full JSON summary of test results"
          volumes:
            - name: credentials
              emptyDir: { }
          workspaces:
              - name: source-code
          steps:
            - name: get-kubeconfig
              ref:
                resolver: git
                params:
                  - name: url
                    value: https://github.com/konflux-ci/build-definitions.git
                  - name: revision
                    value: main
                  - name: pathInRepo
                    value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
              params:
                - name: eaasSpaceSecretRef
                  value: $(tasks.provision-eaas-space.results.secretRef)
                - name: clusterName
                  value: "$(tasks.provision-cluster.results.clusterName)"
                - name: credentials
                  value: credentials
            - name: execute-operator-e2e
              onError: continue
              image: registry.redhat.io/ubi9/go-toolset:1.24@sha256:84286c7555df503df0bd3acb86fe2ad50af82a07f35707918bb0fad312fdc193
              env:
                - name: OIDC_HOST
                  value: "$(tasks.prepare-tests.results.oidc-hostname)"
                - name: KUBECONFIG
                  value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
                - name: CI
                  value: "true"
              volumeMounts:
                - name: credentials
                  mountPath: /credentials
              workingDir: $(workspaces.source-code.path)/operator
              script: |
                #!/bin/sh
                set +e -o pipefail
  
                mkdir -p $(workspaces.source-code.path)/dump/operator-e2e/
                
                export PATH="$PATH:$(workspaces.source-code.path)/binaries"
                export OIDC_ISSUER_URL=https://$OIDC_HOST/auth/realms/trusted-artifact-signer
                openssl s_client -connect $OIDC_HOST:443 > /tmp/ssl.cert
                export SSL_CERT_FILE=/tmp/ssl.cert
                go mod vendor
                make generate
                go test -p 1 ./test/e2e/... -tags=integration -timeout 30m -json > $(workspaces.source-code.path)/dump/operator-e2e/test-result.json

                cp test/**/k8s-dump-*.tar.gz $(workspaces.source-code.path)/dump/operator-e2e/ || echo "no test dump files found"

              securityContext:
                runAsUser: 0
            - name: process-test-results
              ref:
                resolver: git
                params:
                  - name: url
                    value: https://github.com/securesign/pipelines.git
                  - name: revision
                    value: main
                  - name: pathInRepo
                    value: stepactions/integration-test/process-go-test-results.yaml
              params:
                - name: test_output_file
                  value: $(workspaces.source-code.path)/dump/operator-e2e/test-result.json
      - name: run-tas-e2e
        runAfter:
          - prepare-tests
          - clone-e2e-test-source-code
        workspaces:
          - name: source-code
            workspace: work
        taskSpec:
          results:
            - name: TEST_OUTPUT
              description: "Full JSON summary of test results"
          volumes:
            - name: credentials
              emptyDir: { }
          workspaces:
            - name: source-code
          steps:
            - name: get-kubeconfig
              ref:
                resolver: git
                params:
                  - name: url
                    value: https://github.com/konflux-ci/build-definitions.git
                  - name: revision
                    value: main
                  - name: pathInRepo
                    value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
              params:
                - name: eaasSpaceSecretRef
                  value: $(tasks.provision-eaas-space.results.secretRef)
                - name: clusterName
                  value: "$(tasks.provision-cluster.results.clusterName)"
                - name: credentials
                  value: credentials
            - name: install-tas
              ref:
                resolver: git
                params:
                  - name: url
                    value: https://github.com/securesign/pipelines.git
                  - name: revision
                    value: main
                  - name: pathInRepo
                    value: stepactions/integration-test/install-tas.yaml
              params:
                - name: credentials
                  value: credentials
                - name: KUBECONFIG
                  value: "$(steps.get-kubeconfig.results.kubeconfig)"
                - name: workdir
                  value: $(workspaces.source-code.path)/operator
                - name: tas-namespace
                  value: "$(params.TAS_DEPLOY_NAMESPACE)"
                - name: OIDC_HOST
                  value: "$(tasks.prepare-tests.results.oidc-hostname)"
            - name: push-test-image
              image: quay.io/konflux-ci/buildah-task:latest@sha256:27400eaf836985bcc35182d62d727629f061538f61603c05b85d5d99bfa7da2d
              results:
                - name: image
                  type: string
              securityContext:
                capabilities:
                  add:
                    - SETFCAP
              computeResources:
                limits:
                  memory: 8Gi
                requests:
                  memory: 2Gi
                  cpu: '1'
              script: |
                #!/bin/sh
                IMAGE=ttl.sh/test-$(date +%Y%m%d%H%M%S%N):latest
                printf "%s" "$IMAGE" > "$(step.results.image.path)"
                buildah pull alpine:latest
                buildah tag alpine:latest $IMAGE
                buildah push $IMAGE
            - name: prepare-tas-e2e
              image: registry.redhat.io/openshift4/ose-cli
              volumeMounts:
                - name: credentials
                  mountPath: /credentials
              env:
                - name: KUBECONFIG
                  value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
                - name: TASNAMESPACE
                  value: "$(params.TAS_DEPLOY_NAMESPACE)"
              workingDir: $(workspaces.source-code.path)/sigstore-e2e
              script: |
                oc project $TASNAMESPACE
                ./tas-env-variables.sh > .env
            - name: execute-tas-e2e
              image: registry.redhat.io/ubi9/go-toolset:1.24@sha256:84286c7555df503df0bd3acb86fe2ad50af82a07f35707918bb0fad312fdc193
              
              computeResources:
                limits:
                  memory: 4Gi
                requests:
                  memory: 512Mi
              volumeMounts:
                - name: credentials
                  mountPath: /credentials
              onError: continue
              env:
                - name: OIDC_HOST
                  value: "$(tasks.prepare-tests.results.oidc-hostname)"
                - name: KUBECONFIG
                  value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
                - name: CLI_STRATEGY
                  value: "openshift"
                - name: TARGET_IMAGE_NAME
                  value: "$(steps.push-test-image.results.image)"
                - name: MANUAL_IMAGE_SETUP
                  value: "true"
              workingDir: $(workspaces.source-code.path)/sigstore-e2e
              script: |
                #!/bin/bash
                set -x
                echo "Add certificate to ca-bundle.crt"
                openssl s_client -connect "$OIDC_HOST:443" -showcerts </dev/null > /tmp/ssl.cert
                sed -ni '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/p' /tmp/ssl.cert
                cat /tmp/ssl.cert >> /etc/pki/tls/certs/ca-bundle.crt
                
                echo "Run tests"
                mkdir -p $(workspaces.source-code.path)/dump/sigstore-e2e
                set -o allexport && source ./.env && set +o allexport
                go mod vendor
                # exclude UI and benchmark tests 
                go test -v $(go list ./test/... | grep -v rekorsearchui | grep -v benchmark) --ginkgo.v  -json \
                > $(workspaces.source-code.path)/dump/sigstore-e2e/test-result.json
              securityContext:
                runAsUser: 0
            - name: process-test-results
              ref:
                resolver: git
                params:
                  - name: url
                    value: https://github.com/securesign/pipelines.git
                  - name: revision
                    value: main
                  - name: pathInRepo
                    value: stepactions/integration-test/process-go-test-results.yaml
              params:
                - name: test_output_file
                  value: $(workspaces.source-code.path)/dump/sigstore-e2e/test-result.json
    finally:
      - name: secure-push-test-dump
        workspaces:
         - name: dump
           workspace: work
        taskSpec:
          workspaces:
            - name: dump
          volumes:
            - name: push-creds
              secret:
                secretName: securesign-test-dump-oci
          steps:
            - name: oci-push
              ref:
                resolver: git
                params:
                  - name: url
                    value: https://github.com/konflux-ci/tekton-integration-catalog.git
                  - name: revision
                    value: main
                  - name: pathInRepo
                    value: stepactions/secure-push-oci/0.1/secure-push-oci.yaml
              params:
                - name: oci-ref
                  value: "quay.io/securesign/test-dump-oci:$(context.pipelineRun.name)"
                - name: credentials-volume-name
                  value: push-creds
                - name: oci-tag-expiration
                  value: 1d
                - name: workdir-path
                  value: $(workspaces.dump.path)/dump
