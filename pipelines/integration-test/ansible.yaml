---
apiVersion: tekton.dev/v1
kind: PipelineRun
metadata:
  generateName: molecule-test-
spec:
  workspaces:
    - name: work
      volumeClaimTemplate:
        spec:
          accessModes:
            - ReadWriteOnce
          resources:
            requests:
              storage: 1Gi
  pipelineSpec:
    params:
      - name: SNAPSHOT
      - name: molecule_scenarios
        default:
          - default
          - user_provided
          - key_rotation
          - backup_restore_migrate
      - name: cache_oci_storage
        default: "quay.io/securesign/ansible-test-cache"
        description: "OCI storage location for Ansible cache artifacts"
    workspaces:
      - name: work
    tasks:
      - name: parse-metadata
        taskRef:
          resolver: git
          params:
            - name: url
              value: https://github.com/konflux-ci/tekton-integration-catalog
            - name: revision
              value: main
            - name: pathInRepo
              value: tasks/test-metadata/0.3/test-metadata.yaml
        params:
          - name: SNAPSHOT
            value: $(params.SNAPSHOT)
      - name: clone-source-code
        runAfter:
          - parse-metadata
        taskRef:
          params:
            - name: name
              value: git-clone
            - name: bundle
              value: quay.io/konflux-ci/tekton-catalog/task-git-clone:0.1
            - name: kind
              value: task
          resolver: bundles
        params:
          - name: url
            value: $(tasks.parse-metadata.results.git-url)
          - name: revision
            value: $(tasks.parse-metadata.results.git-revision)
          - name: subdirectory
            value: "ansible"
        workspaces:
          - name: output
            workspace: work
      - name: clone-e2e-test-source-code
        taskRef:
          params:
            - name: name
              value: git-clone
            - name: bundle
              value: quay.io/konflux-ci/tekton-catalog/task-git-clone:0.1
            - name: kind
              value: task
          resolver: bundles
        params:
          - name: url
            value: https://github.com/securesign/sigstore-e2e
          - name: revision
            value: main
          - name: subdirectory
            value: "sigstore-e2e"
        workspaces:
          - name: output
            workspace: work
      - name: prepare-molecule-tests
        runAfter:
          - clone-source-code
        workspaces:
          - name: work
            workspace: work
        taskSpec:
          workspaces:
            - name: work
          steps:
            - name: extract-release-image-content
              image: "gcr.io/go-containerregistry/crane"
              args:
                - export
                - $(tasks.parse-metadata.results.container-image)
                - $(workspaces.work.path)/image.tar
            - name: prepare-tests
              image: "quay.io/redhat-appstudio/konflux-test:stable"
              script: |
                #!/bin/sh
                set -ex

                # extract the release image content
                tar xf $(workspaces.work.path)/image.tar -C $(workspaces.work.path)

                # replace the tas_single_node name with the redhat.artifact_signer.tas_single_node name
                find $(workspaces.work.path)/ansible/molecule -type f -name "converge.yml" \
                -exec sed -i  's@name: tas_single_node@name: redhat.artifact_signer.tas_single_node@g' {} +
      # build OCI test cache for parallel task execution
      - name: build-test-cache
        runAfter:
          - prepare-molecule-tests
          - clone-e2e-test-source-code
        taskRef:
          resolver: git
          params:
            - name: url
              value: https://github.com/securesign/pipelines.git
            - name: revision
              value: main
            - name: pathInRepo
              value: tasks/integration-test/ansible/build-test-cache.yaml
        params:
          - name: pythonRequirementsFile
            value: $(workspaces.work.path)/ansible/testing-requirements.txt
          - name: ansibleRequirementsFile
            value: $(workspaces.work.path)/ansible/requirements.yml
          - name: moleculeRequirementsFile
            value: $(workspaces.work.path)/ansible/molecule/requirements.yml
          - name: releaseArtifactSignerFile
            value: $(workspaces.work.path)/releases/redhat-artifact_signer-*.tar.gz
          - name: ociStorage
            value: "$(params.cache_oci_storage):$(context.pipelineRun.name)"
        workspaces:
          - name: work
            workspace: work
      - name: run-molecule-tests
        runAfter:
          - build-test-cache
        matrix:
          params:
            - name: scenario
              value: $(params.molecule_scenarios)
        params:
          - name: cache
            value: $(tasks.build-test-cache.results.cache)
          - name: ansible_repo
            value: $(tasks.build-test-cache.results.ansible_repo)
          - name: run-id
            value: $(context.pipelineRun.name)
        taskRef:
          resolver: git
          params:
            - name: url
              value: https://github.com/securesign/pipelines.git
            - name: revision
              value: main
            - name: pathInRepo
              value: tasks/integration-test/ansible/run-molecule-tests.yaml
      - name: run-sigstore-e2e-tests
        runAfter:
          - run-molecule-tests
        matrix:
          params:
            - name: info
              value: $(tasks.run-molecule-tests.results.instance-info[*])
        params:
          - name: sigstore_e2e_repo
            value: $(tasks.build-test-cache.results.sigstore_e2e_repo)
        taskRef:
          resolver: git
          params:
            - name: url
              value: https://github.com/securesign/pipelines.git
            - name: revision
              value: main
            - name: pathInRepo
              value: tasks/integration-test/ansible/run-sigstore-e2e-tests.yaml
    finally:
      - name: aws-cleanup
        params:
          - name: run-id
            value: "$(context.pipelineRun.name)"
        taskSpec:
          params:
            - name: run-id
          volumes:
            - name: aws-creds
              secret:
                secretName: aws-ci-test
          steps:
            - name: terminate-instances
              volumeMounts:
                - name: aws-creds
                  mountPath: /creds
              image: amazon/aws-cli:latest
              env:
                - name: AWS_DEFAULT_REGION
                  value: "eu-north-1"
              script: |
                #!/bin/bash
                set -eu
                
                set +x
                export AWS_SECRET_ACCESS_KEY=$(cat /creds/AWS_ACCESS_KEY)
                export AWS_ACCESS_KEY_ID=$(cat /creds/AWS_ACCESS_KEY_ID)
                set -x
                
                # Check for credentials before proceeding (crucial step)
                if [ -z "${AWS_ACCESS_KEY_ID}" ]; then
                  echo "ERROR: AWS_ACCESS_KEY_ID environment variable is missing." >&2
                  exit 1
                fi
                
                INSTANCE_LIST=$(
                  aws ec2 describe-instances \
                  --filters "Name=tag:Name,Values=CI-$(params.run-id)*" "Name=instance-state-name,Values=running,pending" \
                  --query 'Reservations[].Instances[].InstanceId' \
                  --output text
                )
                echo "Instance IDs received for termination: ${INSTANCE_LIST} in ${AWS_DEFAULT_REGION}..."
                
                aws ec2 terminate-instances \
                  --instance-ids ${INSTANCE_LIST} \
                  --region ${AWS_DEFAULT_REGION} \
                  --output text
                
                echo "Termination request sent for instance ${INSTANCE_LIST}."
