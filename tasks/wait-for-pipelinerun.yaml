apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: wait-for-pipelinerun
spec:
  description: >
    Waits for a Tekton PipelineRun matching the specified selector to complete, then extracts the produced artifact reference and digest from its results.
  params:
    - name: selector
      description: Label selector used to find the target PipelineRuns (e.g., "mylabel=myvalue").
  results:
    - description: Identifier for the produced artifact (for example, a repository or storage location).
      name: ARTIFACT_REFERENCE
    - description: The SHA256 digest reported for the produced artifact.
      name: ARTIFACT_DIGEST
  steps:
    - name: wait-for-pipelinerun
      image: quay.io/konflux-ci/konflux-test:latest@sha256:d596724343a31c201a5c2e79f233f9ef78ac65726ae4ed5ffa41d76b3dac630f
      env:
      - name: SELECTOR
        value: $(params.selector)
      script: |
        #!/usr/bin/env bash
        set -euo pipefail
        
        get_pr_status() {
          local name="$1"
        
          if oc wait "pipelinerun/$name" --for=jsonpath='{.status.completionTime}' --timeout=20m >&2; then
            status_json=$(oc get pipelinerun "$name" -o jsonpath='{.status}' 2>/dev/null || echo "")
            if [[ -z "$status_json" ]]; then
              echo "pr_status: status not found" >&2
              exit 1
            fi
          
            echo "$status_json"
            exit 0
          else
            echo "Timed out waiting for PipelineRun $name to have a completionTime, or an error occurred." >&2
            exit 1
          fi
        }
          
        artifact_reference=""
        artifact_digest=""
        
        echo "Search PipelineRuns with selector '$SELECTOR'"
        pipeline_names_output=$(oc get pipelineruns -l "$SELECTOR" --sort-by=.metadata.creationTimestamp -o jsonpath='{.items[*].metadata.name}' --ignore-not-found)
        read -r -a pipeline_names <<< "$pipeline_names_output"
        
        # Check if the array is empty
        if [ ${#pipeline_names[@]} -eq 0 ]; then
          echo "Error: No PipelineRuns found with selector '$SELECTOR'." >&2
          exit 1
        fi
          
        # newest pipeline
        pr_name=${pipeline_names[-1]}
          
        echo "Check status of $pr_name"
        pr_status_json=$(get_pr_status $pr_name)
        succeeded_condition_json=$(echo "$pr_status_json" | jq -r '.conditions[]? | select(.type=="Succeeded") | .status')
        
        if [ "$succeeded_condition_json" == "True" ]; then
          artifact_reference=$(echo "$pr_status_json" | jq -r '.results[]? | select(.name=="IMAGE_URL") | .value')
          artifact_digest=$(echo "$pr_status_json" | jq -r '.results[]? | select(.name=="IMAGE_DIGEST") | .value')
          echo "Artifact found in $pr_name, ARTIFACT_REFERENCE: $artifact_reference, ARTIFACT_DIGEST: $artifact_digest"
        else
          echo "PipelineRun $pr_name 'Succeeded' condition is 'False'" >&2
          exit 1
        fi
          
        if [[ -z "$artifact_digest" ]]; then
          echo "artifact_digest: not found" >&2
          exit 1
        fi
          
        if [[ -z "$artifact_reference" ]]; then
          echo "artifact_reference: not found" >&2
          exit 1
        fi
        
        printf "%s" "$artifact_digest" | tee $(results.ARTIFACT_DIGEST.path)
        printf "%s" "$artifact_reference" | tee $(results.ARTIFACT_REFERENCE.path)
