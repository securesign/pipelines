apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: deploy-konflux-config
spec:
  description: |
    Konflux release plan pipeline that processes snapshots containing configuration-as-code
    images and applies the manifests to the tturek-tenant namespace
  params:
    - name: snapshot
      type: string
      description: The namespaced name (namespace/name) of the Snapshot
    - name: applyManifests
      type: string
      default: "true"
      description: Whether to perform actual deployment (true) or dry run only (false)
  tasks:
    - name: resolve-image
      taskSpec:
        params:
          - name: SNAPSHOT_NAME
            type: string
            description: The namespaced name of the Snapshot
          - name: imagePattern
            type: string
            default: "quay.io/redhat-user-workloads/tturek-tenant/configuration-as-code"
            description: Pattern to identify the configuration-as-code image
        results:
          - name: configImage
            description: The resolved configuration-as-code image URL
        steps:
          - name: resolve-image
            image: quay.io/konflux-ci/release-service-utils:e633d51cd41d73e4b3310face21bb980af7a662f
            env:
              - name: SNAPSHOT_NAME
                value: '$(params.SNAPSHOT_NAME)'
            script: |
              #!/usr/bin/env bash
              set -euo pipefail

              IMAGE_PATTERN="$(params.imagePattern)"

              echo -e "\nFetching Snapshot Details..."
              SNAPSHOT_JSON=$(get-resource "snapshot" "${SNAPSHOT_NAME}")

              SNAPSHOT_SPEC=$(echo "$SNAPSHOT_JSON" | jq '.spec')
              
              # Validate that we have valid JSON
              if ! echo "$SNAPSHOT_SPEC" | jq . >/dev/null 2>&1; then
                echo "ERROR: SNAPSHOT spec does not contain valid JSON"
                echo "SNAPSHOT_SPEC value: $SNAPSHOT_SPEC"
                exit 1
              fi

              # SNAPSHOT_SPEC contains the spec data directly (components array)
              CONFIG_IMAGE=$(echo "$SNAPSHOT_SPEC" | jq -r --arg pattern "$IMAGE_PATTERN" '
                .components[] | 
                select(.containerImage | contains($pattern)) | 
                .containerImage')
              
              if [ -z "$CONFIG_IMAGE" ] || [ "$CONFIG_IMAGE" = "null" ]; then
                echo "ERROR: No image matching pattern '$IMAGE_PATTERN' found in snapshot"
                echo "Available images in snapshot:"
                echo "$SNAPSHOT_SPEC" | jq -r '.components[].containerImage'
                exit 1
              fi
              
              echo "Found configuration-as-code image: $CONFIG_IMAGE"
              echo -n "$CONFIG_IMAGE" > "$(results.configImage.path)"
      params:
        - name: SNAPSHOT_NAME
          value: $(params.snapshot)
          
    - name: extract-and-apply-manifests
      runAfter:
        - resolve-image
      taskRef:
        resolver: git
        params:
          - name: url
            value: "https://github.com/osmman/pipelines.git"
          - name: revision
            value: configuration-as-code
          - name: pathInRepo
            value: tasks/extract-and-apply-manifests.yaml
      params:
        - name: configImage
          value: "$(tasks.resolve-image.results.configImage)"
        - name: release
          value: $(params.applyManifests)
          
  workspaces:
    - name: release-workspace
