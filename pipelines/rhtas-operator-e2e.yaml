apiVersion: tekton.dev/v1
kind: Pipeline
metadata:
  name: operator-e2e
spec:
  description: |
    An integration test which provisions an ephemeral Hypershift cluster, deploys the operator
    bundle from a Konflux snapshot and run the e2e test suite.
  params:
    - description: Snapshot of the application
      name: SNAPSHOT
      type: string
    - description: OCP version
      name: OCP_VERSION
      type: string
      default: "4.17"
    - description: Namespace where the the Operator bundle will be deployed.
      name: NAMESPACE
      default: default
      type: string
    - description: Namespace where TAS for e2e tests will be installed
      name: TAS_E2E_NAMESPACE
      default: tas-e2e
      type: string
    - description: Path to the deployment YAML file
      name: deployment-file
      default: deploy/deployment.yaml
      type: string
  tasks:
    - name: parse-metadata
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/securesign/pipelines.git
          - name: revision
            value: main
          - name: pathInRepo
            value: tasks/parse-metadata.yaml
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
    - name: test-metadata
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/konflux-ci/tekton-integration-catalog.git
          - name: revision
            value: main
          - name: pathInRepo
            value: common/tasks/test-metadata/0.1/test-metadata.yaml
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
        - name: test-name
          value: $(context.pipelineRun.name)
    - name: sealights-get-refs
      runAfter:
        - test-metadata
        - provision-cluster
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/SequeI/tekton-integration-catalog.git
          - name: revision
            value: sealight0.2
          - name: pathInRepo
            value: tasks/sealights/sealights-get-refs/0.2/sealights-get-refs.yaml
      params:
        - name: SNAPSHOT
          value: $(params.SNAPSHOT)
    - name: provision-eaas-space
      taskRef:
        resolver: bundles
        params:
          - name: name
            value: eaas-provision-space
          - name: bundle
            value: quay.io/konflux-ci/tekton-catalog/task-eaas-provision-space:0.1-4e4fa7355a6a51083954408e7e3b647e3bddb8d8
          - name: kind
            value: task
      params:
        - name: ownerName
          value: $(context.pipelineRun.name)
        - name: ownerUid
          value: $(context.pipelineRun.uid)
    - name: provision-cluster
      runAfter:
        - provision-eaas-space
      taskSpec:
        results:
          - name: clusterName
            value: "$(steps.create-cluster.results.clusterName)"
        steps:
          - name: pick-version
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-latest-openshift-version-by-prefix/0.1/eaas-get-latest-openshift-version-by-prefix.yaml
            params:
              - name: prefix
                value: "$(params.OCP_VERSION)"
          - name: create-cluster
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-create-ephemeral-cluster-hypershift-aws/0.1/eaas-create-ephemeral-cluster-hypershift-aws.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.provision-eaas-space.results.secretRef)
              - name: version
                value: "$(steps.pick-version.results.version)"
              - name: instanceType
                value: m5.large
              - name: timeout
                value: 60m
              - name: imageContentSources
                value: |
                  - source: registry.redhat.io/rhtas/rhtas-operator-bundle
                    mirrors:
                      - quay.io/securesign/rhtas-operator-bundle
                      - quay.io/securesign/rhtas-operator-bundle-v1-0
                      - quay.io/securesign/rhtas-operator-bundle-v1-1
                      - quay.io/securesign/rhtas-operator-bundle-v1-2
                  - source: registry.redhat.io/rhtas/rhtas-rhel9-operator
                    mirrors:
                      - quay.io/securesign/rhtas-operator
                      - quay.io/securesign/rhtas-operator-v1-0
                      - quay.io/securesign/rhtas-operator-v1-1
                      - quay.io/securesign/rhtas-operator-v1-2
                  - source: registry.redhat.io/rhtas/trillian-logsigner-rhel9
                    mirrors:
                    - quay.io/securesign/trillian-logsigner
                  - source: registry.redhat.io/rhtas/trillian-logserver-rhel9
                    mirrors:
                    - quay.io/securesign/trillian-logserver
                  - source: registry.redhat.io/rhtas/trillian-database-rhel9
                    mirrors:
                    - quay.io/securesign/trillian-database
                  - source: registry.redhat.io/rhtas/fulcio-rhel9
                    mirrors:
                    - quay.io/securesign/fulcio-server
                  - source: registry.redhat.io/rhtas/trillian-redis-rhel9
                    mirrors:
                    - quay.io/securesign/trillian-redis
                  - source: registry.redhat.io/rhtas/rekor-server-rhel9
                    mirrors:
                    - quay.io/securesign/rekor-server
                  - source: registry.redhat.io/rhtas/rekor-search-ui-rhel9
                    mirrors:
                    - quay.io/securesign/rekor-search-ui
                  - source: registry.redhat.io/rhtas/rekor-backfill-redis-rhel9
                    mirrors:
                    - quay.io/securesign/rekor-backfill-redis
                  - source: registry.redhat.io/rhtas/rekor-monitor-rhel9
                    mirrors:
                    - quay.io/securesign/rekor-monitor
                  - source: registry.redhat.io/rhtas/tuf-server-rhel9
                    mirrors:
                    - quay.io/securesign/scaffold-tuf-server
                  - source: registry.redhat.io/rhtas/certificate-transparency-rhel9
                    mirrors:
                    - quay.io/securesign/certificate-transparency-go
                  - source: registry.redhat.io/rhtas/client-server-cg-rhel9
                    mirrors:
                    - quay.io/securesign/cli-client-server-cg
                  - source: registry.redhat.io/rhtas/client-server-re-rhel9
                    mirrors:
                    - quay.io/securesign/client-server-re
                  - source: registry.redhat.io/rhtas/segment-reporting-rhel9
                    mirrors:
                    - quay.io/securesign/segment-backup-job
                  - source: registry.redhat.io/rhtas/timestamp-authority-rhel9
                    mirrors:
                    - quay.io/securesign/timestamp-authority
                  - source: registry.redhat.io/rhtas/createtree-rhel9
                    mirrors:
                    - quay.io/securesign/trillian-createtree
                  - source: registry.redhat.io/rhtas/client-server-rhel9
                    mirrors:
                    - quay.io/securesign/client-server
                  - source: registry.redhat.io/rhtas/tuffer-rhel9
                    mirrors:
                    - quay.io/securesign/tuffer
    - name: install-operator-from-bundle
      runAfter:
        - provision-cluster
        - parse-metadata
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/securesign/pipelines.git
          - name: revision
            value: main
          - name: pathInRepo
            value: tasks/install-operator-from-bundle.yaml
      params:
        - name: eaasSpaceSecretRef
          value: $(tasks.provision-eaas-space.results.secretRef)
        - name: clusterName
          value: "$(tasks.provision-cluster.results.clusterName)"
        - name: bundleImage
          value: "$(tasks.parse-metadata.results.image)"
        - name: namespace
          value: "$(params.NAMESPACE)"
      # use CEL regexp once it moves from alpha (see https://tekton.dev/docs/pipelines/pipelines/#use-cel-expression-in-whenexpression)
      when:
        - input: "$(tasks.parse-metadata.results.component)"
          operator: in
          values: [ "rhtas-operator-bundle", "rhtas-operator-bundle-v1-1", "rhtas-operator-bundle-v1-2" ]
    - name: install-operator-from-image
      runAfter:
        - provision-cluster
        - parse-metadata
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/securesign/pipelines.git
          - name: revision
            value: main
          - name: pathInRepo
            value: tasks/install-operator-from-image.yaml
      params:
        - name: eaasSpaceSecretRef
          value: $(tasks.provision-eaas-space.results.secretRef)
        - name: clusterName
          value: "$(tasks.provision-cluster.results.clusterName)"
        - name: operatorImage
          value: "$(tasks.parse-metadata.results.image)"
        - name: resources_url
          value: "$(tasks.parse-metadata.results.git-url).git/config/env/openshift?ref=$(tasks.parse-metadata.results.git-revision)"
      # use CEL regexp once it moves from alpha (see https://tekton.dev/docs/pipelines/pipelines/#use-cel-expression-in-whenexpression)
      when:
        - input: "$(tasks.parse-metadata.results.component)"
          operator: in
          values: [ "rhtas-operator", "rhtas-operator-v1-1", "rhtas-operator-v1-2" ]
    - name: install-operator-from-fbc
      timeout: "0h5m0s"
      runAfter:
        - provision-cluster
        - parse-metadata
      taskRef:
        resolver: git
        params:
          - name: url
            value: https://github.com/securesign/pipelines.git
          - name: revision
            value: main
          - name: pathInRepo
            value: tasks/install-operator-from-fbc.yaml
      params:
        - name: eaasSpaceSecretRef
          value: $(tasks.provision-eaas-space.results.secretRef)
        - name: clusterName
          value: "$(tasks.provision-cluster.results.clusterName)"
        - name: fbcImage
          value: "$(tasks.parse-metadata.results.image)"
        - name: namespace
          value: "$(params.NAMESPACE)"
      # replace with cel regexp once enabled https://issues.redhat.com/browse/KFLUXSPRT-1833
      when:
        - input: "$(tasks.parse-metadata.results.component)"
          operator: in
          values: [
            "fbc-v4-19", "fbc-v4-18", "fbc-v4-17", "fbc-v4-16", "fbc-v4-15",
            "fbc-v4-19-v1-2", "fbc-v4-18-v1-2", "fbc-v4-17-v1-2", "fbc-v4-16-v1-2", "fbc-v4-15-v1-2",
            "fbc-v4-18-v1-1", "fbc-v4-17-v1-1", "fbc-v4-16-v1-1", "fbc-v4-15-v1-1", "fbc-v4-14-v1-1"
          ]
    - name: prepare-tests
      runAfter:
        # run after either one
        - install-operator-from-image
        - install-operator-from-bundle
        - install-operator-from-fbc
      params:
        - name: namespace
          value: "$(params.NAMESPACE)"
      taskSpec:
        results:
          - name: oidc-hostname
            value: "$(steps.install-keycloak.results.oidc-hostname)"
        volumes:
          - name: credentials
            emptyDir: { }
          - name: repository
            emptyDir: { }
          - name: binaries
            emptyDir: { }
          - name: dump
            emptyDir: { }
          - name: push-creds
            secret:
              secretName: securesign-test-dump-oci
        steps:
          - name: get-kubeconfig
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.provision-eaas-space.results.secretRef)
              - name: clusterName
                value: "$(tasks.provision-cluster.results.clusterName)"
              - name: credentials
                value: credentials
          # workaround - IntegrationTest pipelines does not support workspaces ATM - it is not possible to use git-clone task
          - name: git-clone-operator
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/securesign/pipelines.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/git-clone.yaml
            params:
              - name: url
                value: "$(tasks.parse-metadata.results.operator-url)"
              - name: revision
                value: "$(tasks.parse-metadata.results.operator-revision)"
              - name: repository
                value: repository
          - name: install-keycloak
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/securesign/pipelines.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/install-keycloak.yaml
            params:
              - name: credentials
                value: credentials
              - name: repository
                value: repository
              - name: KUBECONFIG
                value: "$(steps.get-kubeconfig.results.kubeconfig)"
              - name: workdir
                value: source
    - name: run-operator-e2e
      runAfter:
        - prepare-tests
      params:
        - name: namespace
          value: "$(params.NAMESPACE)"
      taskSpec:
        volumes:
          - name: credentials
            emptyDir: { }
          - name: repository
            emptyDir: { }
          - name: binaries
            emptyDir: { }
          - name: dump
            emptyDir: { }
          - name: push-creds
            secret:
              secretName: securesign-test-dump-oci
        steps:
          # workaround - IntegrationTest pipelines does not support workspaces ATM - it is not possible to use git-clone task
          - name: git-clone-operator
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/securesign/pipelines.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/git-clone.yaml
            params:
              - name: url
                value: "$(tasks.parse-metadata.results.operator-url)"
              - name: revision
                value: "$(tasks.parse-metadata.results.operator-revision)"
              - name: repository
                value: repository
          - name: get-tuftool
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/securesign/pipelines.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/extract-tuftool.yaml
            params:
              - name: volume
                value: binaries
          - name: get-cosign
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/securesign/pipelines.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/extract-cosign.yaml
            params:
              - name: volume
                value: binaries
          - name: get-kubeconfig
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.provision-eaas-space.results.secretRef)
              - name: clusterName
                value: "$(tasks.provision-cluster.results.clusterName)"
              - name: credentials
                value: credentials
          - name: execute-operator-e2e
            image: registry.redhat.io/ubi9/go-toolset:1.24@sha256:84286c7555df503df0bd3acb86fe2ad50af82a07f35707918bb0fad312fdc193
            onError: continue
            results:
              - name: status
                type: string
            env:
              - name: OIDC_HOST
                value: "$(tasks.prepare-tests.results.oidc-hostname)"
              - name: KUBECONFIG
                value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
              - name: CI
                value: "true"
            volumeMounts:
              - name: credentials
                mountPath: /credentials
              - name: repository
                mountPath: /repository
              - name: binaries
                mountPath: /binaries
              - name: dump
                mountPath: /dump
            script: |
              #!/bin/sh
              set +e -o pipefail
              cd /repository/source
              export PATH="$PATH:/binaries"
              export OIDC_ISSUER_URL=https://$OIDC_HOST/auth/realms/trusted-artifact-signer
              openssl s_client -connect $OIDC_HOST:443 > /tmp/ssl.cert
              export SSL_CERT_FILE=/tmp/ssl.cert
              go mod vendor
              make test-e2e | tee /dump/testOutput.log
              
              if [ $? -eq 0 ]; then
                echo -n "success" > "$(step.results.status.path)"
              else
                cp test/**/k8s-dump-*.tar.gz /dump
                echo "Dumping files:"
                ls /dump
                echo -n "fail" >  "$(step.results.status.path)"
                exit 1
              fi
            securityContext:
              runAsUser: 0
          - name: secure-push-oci
            when:
              - input: "$(steps.execute-operator-e2e.results.status)"
                operator: notin
                values: [ "success" ]
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/securesign/pipelines.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/secure-push-oci.yaml
            params:
              - name: oci-ref
                value: "quay.io/securesign/test-dump-oci:$(context.pipelineRun.name)"
              - name: credentials-volume-name
                value: push-creds
              - name: artifacts-volume-name
                value: dump
              - name: oci-tag-expiration
                value: 1d
            # workaround - extract dump-push step to separate action once KONFLUX-5535 is resolved
          - name: report-status
            image: registry.redhat.io/ubi9/go-toolset:1.24@sha256:84286c7555df503df0bd3acb86fe2ad50af82a07f35707918bb0fad312fdc193
            env:
              - name: STATUS
                value: "$(steps.execute-operator-e2e.results.status)"
            script: |
              #!/bin/bash
              if [ "$STATUS" != "success" ]; then
              echo "Test failure"
              exit 1 
              fi
    - name: run-tas-e2e
      runAfter:
        - prepare-tests
      params:
        - name: namespace
          value: "$(params.NAMESPACE)"
      taskSpec:
        volumes:
          - name: credentials
            emptyDir: { }
          - name: repository
            emptyDir: { }
          - name: binaries
            emptyDir: { }
          - name: dump
            emptyDir: { }
          - name: push-creds
            secret:
              secretName: securesign-test-dump-oci
        steps:
          - name: get-kubeconfig
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.provision-eaas-space.results.secretRef)
              - name: clusterName
                value: "$(tasks.provision-cluster.results.clusterName)"
              - name: credentials
                value: credentials
          # workaround - IntegrationTest pipelines does not support workspaces ATM - it is not possible to use git-clone task
          - name: git-clone-operator
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/securesign/pipelines.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/git-clone.yaml
            params:
              - name: url
                value: "$(tasks.parse-metadata.results.operator-url)"
              - name: revision
                value: "$(tasks.parse-metadata.results.operator-revision)"
              - name: repository
                value: repository
          - name: git-clone-sigstore-e2e
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/securesign/pipelines.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/git-clone.yaml
            params:
              - name: url
                value: https://github.com/securesign/sigstore-e2e
              - name: revision
                value: main
              - name: repository
                value: repository
              - name: dir
                value: sigstore-e2e
          - name: install-tas
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/securesign/pipelines.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/install-tas.yaml
            params:
              - name: credentials
                value: credentials
              - name: repository
                value: repository
              - name: KUBECONFIG
                value: "$(steps.get-kubeconfig.results.kubeconfig)"
              - name: workdir
                value: source
              - name: tas-namespace
                value: "$(params.TAS_E2E_NAMESPACE)"
              - name: OIDC_HOST
                value: "$(tasks.prepare-tests.results.oidc-hostname)"
          - name: push-test-image
            image: quay.io/konflux-ci/buildah-task:latest@sha256:27400eaf836985bcc35182d62d727629f061538f61603c05b85d5d99bfa7da2d
            results:
              - name: image
                type: string
            securityContext:
              capabilities:
                add:
                  - SETFCAP
            computeResources:
              limits:
                memory: 8Gi
              requests:
                memory: 2Gi
                cpu: '1'
            script: |
              #!/bin/sh
              IMAGE=ttl.sh/test-$(date +%Y%m%d%H%M%S%N):latest
              printf "%s" "$IMAGE" > "$(step.results.image.path)"
              buildah pull alpine:latest
              buildah tag alpine:latest $IMAGE
              buildah push $IMAGE
          - name: prepare-tas-e2e
            image: registry.redhat.io/openshift4/ose-cli
            volumeMounts:
              - name: credentials
                mountPath: /credentials
              - name: repository
                mountPath: /repository
            env:
              - name: KUBECONFIG
                value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
              - name: TASNAMESPACE
                value: "$(params.TAS_E2E_NAMESPACE)"
            script: |
              oc project $TASNAMESPACE
              cd /repository/sigstore-e2e
              ./tas-env-variables.sh > .env
          - name: execute-tas-e2e
            image: registry.redhat.io/ubi9/go-toolset:1.24@sha256:84286c7555df503df0bd3acb86fe2ad50af82a07f35707918bb0fad312fdc193
            computeResources:
              limits:
                memory: 4Gi
              requests:
                memory: 512Mi
            volumeMounts:
              - name: credentials
                mountPath: /credentials
              - name: repository
                mountPath: /repository
            env:
              - name: OIDC_HOST
                value: "$(tasks.prepare-tests.results.oidc-hostname)"
              - name: KUBECONFIG
                value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
              - name: CLI_STRATEGY
                value: "openshift"
              - name: TARGET_IMAGE_NAME
                value: "$(steps.push-test-image.results.image)"
              - name: MANUAL_IMAGE_SETUP
                value: "true"
            script: |
              set -x
              echo "Add certificate to ca-bundle.crt"
              openssl s_client -connect "$OIDC_HOST:443" -showcerts </dev/null > /tmp/ssl.cert
              sed -ni '/-----BEGIN CERTIFICATE-----/,/-----END CERTIFICATE-----/p' /tmp/ssl.cert
              cat /tmp/ssl.cert >> /etc/pki/tls/certs/ca-bundle.crt
              echo "Run tests"
              cd /repository/sigstore-e2e
              # TODO:ppinkas,jbouska - move file loading to viper
              set -o allexport && source /repository/sigstore-e2e/.env && set +o allexport
              go mod vendor
              # exclude UI and benchmark tests 
              go test -v $(go list ./test/... | grep -v rekorsearchui | grep -v benchmark) --ginkgo.v
            securityContext:
              runAsUser: 0
    - name: deploy-test
      runAfter:
        - provision-cluster
        - sealights-get-refs
      taskSpec:
        volumes:
          - name: credentials
            emptyDir: {}
        results:
          - name: BASE_URL
            description: The base URL of the deployed service
        steps:
          - name: get-kubeconfig
            ref:
              resolver: git
              params:
                - name: url
                  value: https://github.com/konflux-ci/build-definitions.git
                - name: revision
                  value: main
                - name: pathInRepo
                  value: stepactions/eaas-get-ephemeral-cluster-credentials/0.1/eaas-get-ephemeral-cluster-credentials.yaml
            params:
              - name: eaasSpaceSecretRef
                value: $(tasks.provision-eaas-space.results.secretRef)
              - name: clusterName
                value: "$(tasks.provision-cluster.results.clusterName)"
              - name: credentials
                value: credentials
          - name: apply-deployment
            image: registry.redhat.io/openshift4/ose-cli:v4.15
            workingDir: /workspace
            volumeMounts:
              - name: credentials
                mountPath: /credentials
            env:
              - name: SEALIGHTS_IMAGES_ARRAY
                value: "$(tasks.sealights-get-refs.results.sealights-instrumented-images)"
              - name: KUBECONFIG
                value: "/credentials/$(steps.get-kubeconfig.results.kubeconfig)"
              - name: SEALIGHTS_IMAGE_PULL_SECRET
                valueFrom:
                  secretKeyRef:
                    name: imagerepository-for-operator-rhtas-operator-sealights-image-pull
                    key: .dockerconfigjson
              - name: SEALIGHTS_AGENT_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: sealights-credentials
                    key: token
            script: |
              set -eux

              yum install git jq -y

              COMPONENT_IMAGE=$(jq -r '.[0]' <<< "$SEALIGHTS_IMAGES_ARRAY")
              if [[ "$COMPONENT_IMAGE" == "null" ]] || [[ -z "$COMPONENT_IMAGE" ]]; then
                echo "ERROR: Could not extract the first instrumented image from the array: $SEALIGHTS_IMAGES_ARRAY"
                exit 1
              fi
              echo "Deploying instrumented image: $COMPONENT_IMAGE"

              BRANCH_NAME="main"
              git clone "$(tasks.parse-metadata.results.git-url)" -b $BRANCH_NAME .
              
              NS="rhtas-operator-$(date +%s)"
              oc new-project $NS

              # Create the pull secret for pulling private instrumented container image
              echo $SEALIGHTS_IMAGE_PULL_SECRET > pull-secret.json
              oc create secret docker-registry sealights-pull-secret --from-file=.dockerconfigjson=pull-secret.json -n $NS
              oc secrets link default sealights-pull-secret --for=pull -n $NS

              # Apply & expose the deployment
              cat <<EOF > deployment.yaml
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                name: rhtas-operator # Changed name to match exposure below
                labels:
                  app: rhtas-operator
              spec:
                replicas: 1
                selector:
                  matchLabels:
                    app: rhtas-operator
                template:
                  metadata:
                    labels:
                      app: rhtas-operator
                  spec:
                    containers:
                      - name: app-container
                        image: "$COMPONENT_IMAGE"
                        ports:
                          - containerPort: 5000
                            protocol: TCP
                        resources:
                          requests:
                            memory: "128Mi"
                            cpu: "500m"
                          limits:
                            memory: "256Mi"
                            cpu: "1"
              EOF
              oc apply -f deployment.yaml -n $NS
              oc expose deployment rhtas-operator --type=ClusterIP --name=rhtas-operator-app-service -n $NS

              # Create an OpenShift route
              cat <<EOF | oc apply -n $NS -f -
              apiVersion: route.openshift.io/v1
              kind: Route
              metadata:
                name: rhtas-operator-app-route
              spec:
                to:
                  kind: Service
                  name: rhtas-operator-app-service
                port:
                  targetPort: 5000  # Match the port the service exposes
              EOF

              # Wait for the route hostname to be available
              export ROUTE_HOST=""
              while [ -z "$ROUTE_HOST" ]; do
                ROUTE_HOST=$(oc get route rhtas-operator-app-route -o jsonpath='{.spec.host}')
                sleep 10
              done

              oc wait --for=condition=ready pod -l app=rhtas-operator -n $NS --timeout=5m

              export BASE_URL="http://${ROUTE_HOST}"
              echo "Application exposed at ${BASE_URL}"
              echo -n "${BASE_URL}" > /tekton/results/BASE_URL
    - name: run-ginkgo-tests
      runAfter:
        - deploy-test
      taskSpec:
        steps:
          - name: run-ginkgo-tests
            image: golang:1.22-slim
            workingDir: /workspace
            env:
              - name: BASE_URL
                value: "$(tasks.deploy-test.results.BASE_URL)" 
              - name: SEALIGHTS_AGENT_TOKEN
                valueFrom:
                  secretKeyRef:
                    name: sealights-credentials
                    key: token
              - name: BUILD_SESSION_ID
                value: $(tasks.sealights-get-refs.results.sealights-bsid)
              - name: DOMAIN
                value: "redhat.sealights.co"
            script: |
              #!/bin/bash
              set -euox
              
              apt-get update && apt-get install -y git curl jq man-db procps && rm -rf /var/lib/apt/lists/*
              
              if [ -z "$BASE_URL" ]; then
                  echo "Error: BASE_URL is not set!"
                  exit 1
              fi

              BRANCH_NAME="$(tasks.test-metadata.results.target-repo-branch)"
              if [[ "$(tasks.test-metadata.results.test-event-type)" == "pull_request" ]]; then
                BRANCH_NAME="$(tasks.test-metadata.results.source-repo-branch)"
              fi
              git clone "$(tasks.test-metadata.results.git-url)" -b "$BRANCH_NAME" .

              go install github.com/onsi/ginkgo/v2/ginkgo@latest
              export PATH=$PATH:$(go env GOPATH)/bin
              
              echo "INFO: Creating Sealights test session..."
              TEST_SESSION_ID=$(curl -X POST "https://$DOMAIN/sl-api/v1/test-sessions" \
                -H "Authorization: Bearer $SEALIGHTS_AGENT_TOKEN" \
                -H "Content-Type: application/json" \
                -d '{"labId":"","testStage":"go-calc-integration","bsid":"'${BUILD_SESSION_ID}'","sessionTimeout":10000}' | jq -r '.data.testSessionId')

              if [ -n "$TEST_SESSION_ID" ]; then
                echo "Test session ID: $TEST_SESSION_ID"
                export TEST_SESSION_ID
              else
                echo "Failed to retrieve test session ID"
                exit 1
              fi

              RESPONSE=$(curl -X GET "https://$DOMAIN/sl-api/v2/test-sessions/$TEST_SESSION_ID/exclude-tests" \
                -H "Authorization: Bearer $SEALIGHTS_AGENT_TOKEN" \
                -H "Content-Type: application/json")

              echo "$RESPONSE" | jq .

              mapfile -t EXCLUDED_TESTS < <(echo "$RESPONSE" | jq -r '.data.excludedTests[].testName')

              GINKGO_CMD=("ginkgo" "--json-report=report.json")
              for TEST in "${EXCLUDED_TESTS[@]}"; do
                  GINKGO_CMD+=("--skip=$TEST")
              done

              cd tests/e2e && "${GINKGO_CMD[@]}"

              PROCESSED_JSON=$(
                cat "report.json" | jq -c '.[] | .SpecReports[]' | while IFS= read -r line; do
                  name=$(echo "$line" | jq -r '.LeafNodeText')
                  start_raw=$(echo "$line" | jq -r '.StartTime')
                  end_raw=$(echo "$line" | jq -r '.EndTime')
                  status=$(echo "$line" | jq -r '.State')

                  start=$(date --date="$start_raw" +%s%3N)

                  if [ -z "$end_raw" ] || [ "$end_raw" == "0001-01-01T00:00:00Z" ]; then
                    end=$(date +%s%3N)
                  else
                    end=$(date --date="$end_raw" +%s%3N)
                  fi

                  echo "{\"name\": \"$name\", \"start\": $start, \"end\": $end, \"status\": \"$status\"}"
                done | jq -s '.'
              )

              echo "$PROCESSED_JSON" | jq .

              curl -X POST "https://$DOMAIN/sl-api/v2/test-sessions/$TEST_SESSION_ID" \
                -H "Authorization: Bearer $SEALIGHTS_AGENT_TOKEN" \
                -H "Content-Type: application/json" \
                -d "${PROCESSED_JSON}"

              curl -X DELETE "https://$DOMAIN/sl-api/v1/test-sessions/$TEST_SESSION_ID" \
                -H "Authorization: Bearer $SEALIGHTS_AGENT_TOKEN" \
                -H "Content-Type: application/json"

              echo "INFO: Script completed successfully."
